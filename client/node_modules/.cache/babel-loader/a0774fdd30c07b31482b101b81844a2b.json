{"ast":null,"code":"import _slicedToArray from \"/Users/dew/Desktop/NorthwesternCoding/GoogleBooks/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/dew/Desktop/NorthwesternCoding/GoogleBooks/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/dew/Desktop/NorthwesternCoding/GoogleBooks/client/src/utils/GlobalState.js\";\nimport React, { createContext, useReducer, useContext } from \"react\"; // boiler plate to set up context and them parse out Provider\n\nvar StoreContext = createContext();\nvar Provider = StoreContext.Provider; // equiv to line above is:\n// const Provider = StoreContext.Provider\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"one\":\n      return \"Hello\";\n\n    case \"loadSaved\":\n      return action.books;\n\n    case \"bookSearch\":\n      return action.results;\n\n    default:\n      return state;\n  }\n};\n\nvar StoreProvider = function StoreProvider(_ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? [] : _ref$value,\n      props = _objectWithoutProperties(_ref, [\"value\"]);\n\n  // useReducer takes the reduer function and a default val, return array of two things which we are assigning to state and dispatch\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case \"one\":\n        return \"Hello\";\n\n      case \"loadSaved\":\n        return action.books;\n\n      case \"bookSearch\":\n        return action.results;\n\n      default:\n        return state;\n    }\n  }, []),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  return React.createElement(Provider, Object.assign({\n    value: [state, dispatch]\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n}; // more boilerplate\n\n\nvar useStoreContext = function useStoreContext() {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","map":{"version":3,"sources":["/Users/dew/Desktop/NorthwesternCoding/GoogleBooks/client/src/utils/GlobalState.js"],"names":["React","createContext","useReducer","useContext","StoreContext","Provider","reducer","state","action","type","books","results","StoreProvider","value","props","dispatch","useStoreContext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D,C,CAEA;;AACA,IAAMC,YAAY,GAAGH,aAAa,EAAlC;IACQI,Q,GAAaD,Y,CAAbC,Q,EACR;AACA;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAO,OAAP;;AACF,SAAK,WAAL;AACE,aAAOD,MAAM,CAACE,KAAd;;AACF,SAAK,YAAL;AACE,aAAOF,MAAM,CAACG,OAAd;;AACF;AACE,aAAOJ,KAAP;AARJ;AAUD,CAXD;;AAaA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,OAAmC;AAAA,wBAAxBC,KAAwB;AAAA,MAAxBA,KAAwB,2BAAhB,EAAgB;AAAA,MAATC,KAAS;;AACvD;AADuD,oBAE7BZ,UAAU,CAAC,UAACK,KAAD,EAAQC,MAAR,EAAmB;AACtD,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,KAAL;AACE,eAAO,OAAP;;AACF,WAAK,WAAL;AACE,eAAOD,MAAM,CAACE,KAAd;;AACF,WAAK,YAAL;AACE,eAAOF,MAAM,CAACG,OAAd;;AACF;AACE,eAAOJ,KAAP;AARJ;AAUD,GAXmC,EAWjC,EAXiC,CAFmB;AAAA;AAAA,MAEhDA,KAFgD;AAAA,MAEzCQ,QAFyC;;AAevD,SAAO,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,CAACR,KAAD,EAAQQ,QAAR;AAAjB,KAAwCD,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAhBD,C,CAkBA;;;AACA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,SAAOb,UAAU,CAACC,YAAD,CAAjB;AACD,CAFD;;AAIA,SAASQ,aAAT,EAAwBI,eAAxB","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\n\n// boiler plate to set up context and them parse out Provider\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n// equiv to line above is:\n// const Provider = StoreContext.Provider\n\nconst reducer = function(state, action) {\n  switch (action.type) {\n    case \"one\":\n      return \"Hello\";\n    case \"loadSaved\":\n      return action.books;\n    case \"bookSearch\":\n      return action.results;\n    default:\n      return state;\n  }\n};\n\nconst StoreProvider = function({ value = [], ...props }) {\n  // useReducer takes the reduer function and a default val, return array of two things which we are assigning to state and dispatch\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"one\":\n        return \"Hello\";\n      case \"loadSaved\":\n        return action.books;\n      case \"bookSearch\":\n        return action.results;\n      default:\n        return state;\n    }\n  }, []);\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\n// more boilerplate\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n"]},"metadata":{},"sourceType":"module"}